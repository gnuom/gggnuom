C51 COMPILER V9.59.0.0   FLASH                                                             06/27/2023 19:17:31 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE FLASH
OBJECT MODULE PLACED IN ..\OBJ\flash.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\FWLib\src\flash.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\CORE;..\FWL
                    -ib\inc;..\SYSTEM;..\USER\app;..\TOUCHLib;..\USER\driver;..\USER\event;..\USER\mid) DEBUG PRINT(..\OBJ\flash.lst) TABS(2)
                    - OBJECT(..\OBJ\flash.obj)

line level    source

   1          /*******************************************************************************
   2          * Copyright (C) 2019 China Micro Semiconductor Limited Company. All Rights Reserved.
   3          *
   4          * This software is owned and published by:
   5          * CMS LLC, No 2609-10, Taurus Plaza, TaoyuanRoad, NanshanDistrict, Shenzhen, China.
   6          *
   7          * BY DOWNLOADING, INSTALLING OR USING THIS SOFTWARE, YOU AGREE TO BE BOUND
   8          * BY ALL THE TERMS AND CONDITIONS OF THIS AGREEMENT.
   9          *
  10          * This software contains source code for use with CMS
  11          * components. This software is licensed by CMS to be adapted only
  12          * for use in systems utilizing CMS components. CMS shall not be
  13          * responsible for misuse or illegal use of this software for devices not
  14          * supported herein. CMS is providing this software "AS IS" and will
  15          * not be responsible for issues arising from incorrect user implementation
  16          * of the software.
  17          *
  18          * This software may be replicated in part or whole for the licensed use,
  19          * with the restriction that this Disclaimer and Copyright notice must be
  20          * included with each copy of this software, whether used in part or whole,
  21          * at all times.
  22          */
  23          
  24          /****************************************************************************/
  25          /** \file FLASH.c
  26          **
  27          ** 
  28          **
  29          **  History:
  30          **  
  31          *****************************************************************************/
  32          /****************************************************************************/
  33          /*  include files
  34          *****************************************************************************/
  35          #include "flash.h"
  36          
  37          /****************************************************************************/
  38          /*  Local pre-processor symbols/macros('#define')
  39          ****************************************************************************/
  40          
  41          
  42          /****************************************************************************/
  43          /*  Global variable definitions(declared in header file with 'extern')
  44          *****************************************************************************/
  45          
  46          /****************************************************************************/
  47          /*  Local type definitions('typedef')
  48          *****************************************************************************/
  49          
  50          /****************************************************************************/
  51          /*  Local variable  definitions('static')
  52          *****************************************************************************/
  53          
C51 COMPILER V9.59.0.0   FLASH                                                             06/27/2023 19:17:31 PAGE 2   

  54          /****************************************************************************/
  55          /*  Local function prototypes('static')
  56          *****************************************************************************/
  57          
  58          /****************************************************************************/
  59          /*  Function implementation - global ('extern') and local('static')
  60          *****************************************************************************/
  61          /*****************************************************************************
  62           ** \brief  FLASH_UnLock
  63           **     解锁
  64           ** \param [in] none
  65           ** \return  none
  66           ** \note  
  67          *****************************************************************************/
  68          void FLASH_UnLock(void)
  69          {
  70   1        if(EA == 1)//操作TA时序时不允许被打断，因而需要关闭中断
  71   1        {
  72   2          EA = 0;
  73   2          TA = 0xAA;
  74   2          TA = 0x55;
  75   2          EA = 1;
  76   2          MLOCK = 0xAA;
  77   2        }
  78   1        else
  79   1        {
  80   2          TA = 0xAA;
  81   2          TA = 0x55;
  82   2          MLOCK = 0xAA;
  83   2        }
  84   1      
  85   1      }
  86          /*****************************************************************************
  87           ** \brief  FLASH_Lock
  88           **     上锁
  89           ** \param [in] none
  90           ** \return  none
  91           ** \note  
  92          *****************************************************************************/
  93          void FLASH_Lock(void)
  94          {
  95   1        if(EA == 1)//操作TA时序时不允许被打断，因而需要关闭中断
  96   1        {
  97   2          EA = 0;
  98   2          TA = 0xAA;
  99   2          TA = 0x55;
 100   2          MLOCK = 0x00;
 101   2          EA = 1;
 102   2        }
 103   1        else
 104   1        {
 105   2          TA = 0xAA;
 106   2          TA = 0x55;
 107   2          MLOCK = 0x00;
 108   2        }
 109   1      
 110   1        
 111   1      }
 112          
 113          /*****************************************************************************
 114           ** \brief  FLASH_Write
 115           **     写缓存
C51 COMPILER V9.59.0.0   FLASH                                                             06/27/2023 19:17:31 PAGE 3   

 116           ** \param [in] FLASHModule ：(1)FLASH_DATA
 117           **               (2)FLASH_CODE
 118           **       Addr: 16bit   (1)FLASH_DATA_ADDR: 0x00~0x3FF;
 119           **               (2)FLASH_CODE_ADDR: 0x00~0x3FFF;  
 120           **       Data: 8bit
 121           ** \return  none
 122           ** \note  
 123          *****************************************************************************/
 124          void FLASH_Write(uint8_t FLASHModule, uint16_t Addr, uint8_t Data)
 125          {
 126   1        MDATA = Data;
 127   1        MADRL = Addr;
 128   1        MADRH = Addr>>8;
 129   1        if (EA == 1)
 130   1        {
 131   2          EA = 0;
 132   2          MCTRL = FLASH_WRITE | FLASHModule;   //操作FLASH期间不允许被打断
 133   2          _nop_();
 134   2          _nop_();
 135   2          _nop_();
 136   2          _nop_();
 137   2          _nop_();
 138   2          _nop_();  
 139   2          EA = 1;
 140   2        }
 141   1        else
 142   1        {
 143   2          MCTRL = FLASH_WRITE | FLASHModule;  
 144   2          _nop_();
 145   2          _nop_();
 146   2          _nop_();
 147   2          _nop_();
 148   2          _nop_();
 149   2          _nop_();  
 150   2        }
 151   1      
 152   1      }
 153          
 154          /*****************************************************************************
 155           ** \brief  FLASH_Read
 156           **     读缓存
 157           ** \param [in]  FLASHModule：(1)FLASH_DATA
 158           **               (2)FLASH_CODE
 159           **       Addr: 16bit   (1)FLASH_DATA_ADDR: 0x00~0x3FF;
 160           **               (2)FLASH_CODE_ADDR: 0x00~0x3FFF;  
 161           ** \return  8bit Data
 162           ** \note 
 163          *****************************************************************************/
 164          uint8_t FLASH_Read(uint8_t FLASHModule, uint16_t Addr)
 165          {
 166   1        MADRL = Addr;
 167   1        MADRH = Addr>>8;
 168   1        if(EA == 1)
 169   1        {
 170   2          EA = 0;
 171   2          MCTRL = FLASH_READ | FLASHModule;  //操作FLASH期间不允许被打断
 172   2          _nop_();
 173   2          _nop_();
 174   2          _nop_();
 175   2          _nop_();
 176   2          _nop_();
 177   2          _nop_();
C51 COMPILER V9.59.0.0   FLASH                                                             06/27/2023 19:17:31 PAGE 4   

 178   2          EA = 1;
 179   2        }
 180   1        else
 181   1        {
 182   2          MCTRL = FLASH_READ | FLASHModule; 
 183   2          _nop_();
 184   2          _nop_();
 185   2          _nop_();
 186   2          _nop_();
 187   2          _nop_();
 188   2          _nop_();
 189   2        }
 190   1        return (MDATA);
 191   1      }
 192          
 193          /*****************************************************************************
 194           ** \brief  FLASH_Erase
 195           **     擦除
 196           ** \param [in]  FLASHModule：(1)FLASH_DATA
 197           **               (2)FLASH_CODE
 198           **       Addr: 16bit   (1)FLASH_DATA_ADDR: 0x00~0x3FF;
 199           **               (2)FLASH_CODE_ADDR: 0x00~0x3FFF;
 200           ** \return  none
 201           ** \note 
 202          *****************************************************************************/
 203          void FLASH_Erase(uint8_t FLASHModule, uint16_t Addr)
 204          {
 205   1        MADRL = Addr;
 206   1        MADRH = Addr>>8;
 207   1        if(EA == 1)
 208   1        {
 209   2          EA = 0;
 210   2          MCTRL  = FLASH_ERASE | FLASHModule; //操作Flash期间不允许被打断
 211   2          _nop_();
 212   2          _nop_();
 213   2          _nop_();
 214   2          _nop_();
 215   2          _nop_();
 216   2          _nop_();
 217   2          EA = 1;
 218   2        }
 219   1        else
 220   1        {
 221   2          MCTRL  = FLASH_ERASE | FLASHModule; 
 222   2          _nop_();
 223   2          _nop_();
 224   2          _nop_();
 225   2          _nop_();
 226   2          _nop_();
 227   2          _nop_();
 228   2        }
 229   1      }
 230          
 231          /*****************************************************************************
 232           ** \brief  FLASH_Crc
 233           **     CRC校验
 234           ** \param [in]  SAddr: 16bit  FLASH_CODE_ADDR: 0x00~0x3FFF;
 235           **        EAddr: 16bit  FLASH_CODE_ADDR: 0x00~0x3FFF;
 236           ** \return 16位校验值
 237           ** \note 
 238          *****************************************************************************/
 239          uint16_t  FLASH_Crc(uint16_t SAddr, uint16_t EAddr)
C51 COMPILER V9.59.0.0   FLASH                                                             06/27/2023 19:17:31 PAGE 5   

 240          {
 241   1        uint16_t crc;
 242   1        if(EA == 1)//操作Flash期间不允许被打断
 243   1        {
 244   2          EA = 0;
 245   2          PCRCDL =0x00;
 246   2          PCRCDH =0x00;
 247   2          MCTRL = 0x00;
 248   2          MADRL = SAddr;
 249   2          MADRH = SAddr>>8; 
 250   2          MCTRL = 0x02;
 251   2          MADRL = EAddr;
 252   2          MADRH = EAddr>>8; 
 253   2          MCTRL = FLASH_CRC;  
 254   2          while(MCTRL & FLASH_MCTRL_MSTART_Msk);
 255   2          crc = PCRCDL | (PCRCDH<<8);
 256   2          EA = 1;
 257   2        }
 258   1        else
 259   1        {
 260   2          PCRCDL =0x00;
 261   2          PCRCDH =0x00;
 262   2          MCTRL = 0x00;
 263   2          MADRL = SAddr;
 264   2          MADRH = SAddr>>8; 
 265   2          MCTRL = 0x02;
 266   2          MADRL = EAddr;
 267   2          MADRH = EAddr>>8; 
 268   2          MCTRL = FLASH_CRC;  
 269   2          while(MCTRL & FLASH_MCTRL_MSTART_Msk);
 270   2          crc = PCRCDL | (PCRCDH<<8);
 271   2        }
 272   1      
 273   1        return crc;
 274   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    264    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
