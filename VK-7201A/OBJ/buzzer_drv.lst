C51 COMPILER V9.59.0.0   BUZZER_DRV                                                        06/27/2023 19:17:35 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BUZZER_DRV
OBJECT MODULE PLACED IN ..\OBJ\buzzer_drv.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\USER\driver\buzzer_drv.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\CORE
                    -;..\FWLib\inc;..\SYSTEM;..\USER\app;..\TOUCHLib;..\USER\driver;..\USER\event;..\USER\mid) DEBUG PRINT(..\OBJ\buzzer_drv.
                    -lst) TABS(2) OBJECT(..\OBJ\buzzer_drv.obj)

line level    source

   1          
   2          #define __EXT_BUZZERDRV_
   3          #include "Globals.h"
   4          
   5          ///////////////////////////////////////////////////////////////////////////////////////////////////
   6          bool_t bBuzzerOn;
   7          static uint16_t RAM_xDATA bzOnTime, bzCtrlOnTime;
   8          static uint8_t RAM_xDATA bzToneType;
   9          
  10          ///////////////////////////////////////////////////////////////////////////////////////////////////
  11          #define cnBuzzerToneFreq_2K3      (163)
  12          #define cnBuzzerToneFreq_2K6      (144)
  13          #define cnBuzzerToneFreq_2K9      (129)
  14          #define cnBuzzerToneFreq_3K3      (113)   // Fsys=48Mhz£¬Fbuz = Fsys/(2*64*113) =3.3khz
  15          #define cnBuzzerToneFreq_3K6      (104)
  16          #define cnBuzzerToneFreq_3K9      (96)
  17          #define cnBuzzerToneFreq_4K       (93)
  18          #define cnBuzzerToneFreq_Default    cnBuzzerToneFreq_2K6
  19          #define BUZ_ConfigBuzzerFreq(x)     do{ BUZ_ConfigBuzzer(BUZ_CKS_64, x); }while(0)
  20          void BUZZER_Config(void)
  21          {
  22   1        // (1)ÅäÖÃ·äÃùÆ÷Ê±ÖÓ
  23   1        BUZ_ConfigBuzzerFreq(cnBuzzerToneFreq_Default); 
  24   1        // (2)ÅäÖÃ·äÃùÆ÷Êä³öIO
  25   1        GPIO_SET_MUX_MODE(P06CFG, GPIO_P06_MUX_BUZZ);
  26   1        // (3)Ê¹ÄÜ·äÃùÆ÷Ê±ÖÓ
  27   1        BUZ_DisableBuzzer();  
  28   1      }
  29          
  30          
  31          ///////////////////////////////////////////////////////////////////////////////////////////////////
  32          void Buzzer_Init(void)
  33          {
  34   1        GPIO_SET_MUX_MODE(CFG_BUZ_POWER, GPIO_MUX_GPIO);  
  35   1        GPIO_ENABLE_OUTPUT(PortTRIS_BUZ_POWER, PIN_BUZ_POWER); 
  36   1      
  37   1        BUZZER_Config();
  38   1        BuzzerOff();
  39   1      
  40   1        bzToneType = cnBzToneOff;
  41   1        bzOnTime = 0;
  42   1        bzCtrlOnTime = 0;
  43   1      }
  44          
  45          static ROM_DATA BzTone_FMT BzToneTab[] = {
  46            //            Tv(bzCtrlOnT)   Tf(bzOnT)
  47            { cnBzTonePowerOn,    (500UL/cnBzTIntv),  (2000UL/cnBzTIntv) },
  48            { cnBzTonePowerOff,   (20UL/cnBzTIntv), (1000UL/cnBzTIntv) },
  49            { cnBzToneKeyPress,   (200UL/cnBzTIntv),  (1000UL/cnBzTIntv) },
  50            { cnBzToneCancel,   (500UL/cnBzTIntv),  (2000UL/cnBzTIntv) },
  51            //{ cnBzToneDone,     (2000UL/cnBzTIntv), (3000UL/cnBzTIntv) },
  52            { cnBzToneDone,     (2UL/cnBzTIntv),  (900UL/cnBzTIntv) },
  53          };
C51 COMPILER V9.59.0.0   BUZZER_DRV                                                        06/27/2023 19:17:35 PAGE 2   

  54          
  55          /************************************************************
  56          ·äÃùÆ÷ÖÃÉù£ºÉèÖÃ¸÷ÊÂ¼þÀàÐÍ·¢ÉùÉùµ÷(PW_ON PW_OFF KEYPRESS)
  57          *************************************************************/
  58          static uint8_t bzDoneCnt;
  59          void SetBuzzerRunTime(uint8_t bzTone)
  60          {
  61   1        uint8_t i;
  62   1        
  63   1        if((bzTone > cnBzToneOff) && (bzTone < cnBzTone_max))
  64   1        {
  65   2          for(i = 0; i < (sizeof(BzToneTab) / sizeof(BzTone_FMT)); i++)
  66   2          {
  67   3            if(bzTone == BzToneTab[i].bzTone)
  68   3            {
  69   4              bzDoneCnt = 0;
  70   4              bzToneType = bzTone;
  71   4              bzOnTime = BzToneTab[i].bzOnT;        //10;
  72   4              bzCtrlOnTime = BzToneTab[i].bzCtrlOnT;    //10;
  73   4              BUZ_ConfigBuzzerFreq(cnBuzzerToneFreq_Default);
  74   4              BuzzerOn();
  75   4              return;
  76   4            }
  77   3          }
  78   2        }
  79   1      
  80   1        bzToneType = cnBzToneOff;
  81   1        BuzzerOff();
  82   1      }
  83          
  84          /************************************************************
  85          ·äÃùÆ÷ÈÎÎñµ÷¶È£º1ms task
  86          *************************************************************/
  87          void Buzzer_Run_Task(void)
  88          {
  89   1        if((bBuzzerOn == FALSE) || ((bzOnTime == 0) && (bzCtrlOnTime == 0)))
  90   1        {
  91   2          if((bzToneType == cnBzToneDone) && (bzDoneCnt < 2))
  92   2          {
  93   3            ++bzDoneCnt;
  94   3      
  95   3            bzToneType = cnBzToneDone;
  96   3            bzOnTime = (900UL/cnBzTIntv);
  97   3            bzCtrlOnTime = (10UL/cnBzTIntv);
  98   3            BUZ_ConfigBuzzerFreq(cnBuzzerToneFreq_Default);
  99   3            BuzzerOn();
 100   3          }
 101   2          else
 102   2          {
 103   3            bzDoneCnt = 0;
 104   3            bzToneType = cnBzToneOff;
 105   3            bzOnTime = 0;
 106   3            bzCtrlOnTime = 0;
 107   3            BuzzerOff();
 108   3          } 
 109   2          return;
 110   2        }
 111   1      
 112   1        if(bzCtrlOnTime > 0)
 113   1        {
 114   2          if((--bzCtrlOnTime) == 0)
 115   2          {
C51 COMPILER V9.59.0.0   BUZZER_DRV                                                        06/27/2023 19:17:35 PAGE 3   

 116   3            BuzzerCtrlOff();
 117   3          }
 118   2        }
 119   1      
 120   1        if(bzOnTime > 0)
 121   1        {
 122   2          --bzOnTime;
 123   2          if(bzToneType == cnBzToneCancel)
 124   2          {
 125   3            if(bzOnTime > (1800/cnBzTIntv))
 126   3              BUZ_ConfigBuzzerFreq(cnBuzzerToneFreq_2K9);
 127   3            else if(bzOnTime > (1600/cnBzTIntv))
 128   3              BUZ_ConfigBuzzerFreq(cnBuzzerToneFreq_2K6);
 129   3            else
 130   3              BUZ_ConfigBuzzerFreq(cnBuzzerToneFreq_2K3);
 131   3          }   
 132   2          else if(bzToneType == cnBzTonePowerOn)
 133   2          {
 134   3            if(bzOnTime > (1800/cnBzTIntv))
 135   3              BUZ_ConfigBuzzerFreq(cnBuzzerToneFreq_2K3);
 136   3            else if(bzOnTime > (1600/cnBzTIntv))
 137   3              BUZ_ConfigBuzzerFreq(cnBuzzerToneFreq_2K6);
 138   3            else
 139   3              BUZ_ConfigBuzzerFreq(cnBuzzerToneFreq_2K9);
 140   3          } 
 141   2          else if(bzToneType == cnBzToneDone)
 142   2          {
 143   3            if(bzOnTime > (2500/cnBzTIntv))
 144   3              BUZ_EnableBuzzer();
 145   3            else if(bzOnTime > (2000/cnBzTIntv))  
 146   3              BUZ_DisableBuzzer();
 147   3            else if(bzOnTime > (1500/cnBzTIntv))
 148   3              BUZ_EnableBuzzer();
 149   3            else if(bzOnTime > (1000/cnBzTIntv))  
 150   3              BUZ_DisableBuzzer();
 151   3            else if(bzOnTime > (500/cnBzTIntv))
 152   3              BUZ_EnableBuzzer();
 153   3            else
 154   3              BUZ_DisableBuzzer();
 155   3          }
 156   2          else if(bzToneType == cnBzToneKeyPress)
 157   2          {
 158   3            //if(bzOnTime == (400/cnBzTIntv))
 159   3            //  BUZ_ConfigBuzzerFreq(cnBuzzerToneFreq_3K3);
 160   3          }
 161   2        }
 162   1        else
 163   1        {
 164   2          BuzzerSet(cnBuzzerL);
 165   2        }
 166   1      }
 167          
 168          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    564    ----
   CONSTANT SIZE    =     25    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       2
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   BUZZER_DRV                                                        06/27/2023 19:17:35 PAGE 4   

   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
