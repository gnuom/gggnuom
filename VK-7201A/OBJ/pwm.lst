C51 COMPILER V9.59.0.0   PWM                                                               06/27/2023 19:17:32 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN ..\OBJ\pwm.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\FWLib\src\pwm.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\CORE;..\FWLib
                    -\inc;..\SYSTEM;..\USER\app;..\TOUCHLib;..\USER\driver;..\USER\event;..\USER\mid) DEBUG PRINT(..\OBJ\pwm.lst) TABS(2) OBJ
                    -ECT(..\OBJ\pwm.obj)

line level    source

   1          /*******************************************************************************
   2          * Copyright (C) 2019 China Micro Semiconductor Limited Company. All Rights Reserved.
   3          *
   4          * This software is owned and published by:
   5          * CMS LLC, No 2609-10, Taurus Plaza, TaoyuanRoad, NanshanDistrict, Shenzhen, China.
   6          *
   7          * BY DOWNLOADING, INSTALLING OR USING THIS SOFTWARE, YOU AGREE TO BE BOUND
   8          * BY ALL THE TERMS AND CONDITIONS OF THIS AGREEMENT.
   9          *
  10          * This software contains source code for use with CMS
  11          * components. This software is licensed by CMS to be adapted only
  12          * for use in systems utilizing CMS components. CMS shall not be
  13          * responsible for misuse or illegal use of this software for devices not
  14          * supported herein. CMS is providing this software "AS IS" and will
  15          * not be responsible for issues arising from incorrect user implementation
  16          * of the software.
  17          *
  18          * This software may be replicated in part or whole for the licensed use,
  19          * with the restriction that this Disclaimer and Copyright notice must be
  20          * included with each copy of this software, whether used in part or whole,
  21          * at all times.
  22          */
  23          
  24          /****************************************************************************/
  25          /** \file pwm.c
  26          **
  27          ** 
  28          **
  29          **  History:
  30          **  
  31          *****************************************************************************/
  32          
  33          /****************************************************************************/
  34          /*  include files
  35          *****************************************************************************/
  36          #include "pwm.h"
  37          /****************************************************************************/
  38          /*  Local pre-processor symbols/macros ('#define')
  39          *****************************************************************************/
  40          
  41          /****************************************************************************/
  42          /*  Global variable definitions (declared in header file with 'extern')
  43          *****************************************************************************/
  44          
  45          /****************************************************************************/
  46          /*  Local type definitions ('typedef')
  47          *****************************************************************************/
  48          
  49          /****************************************************************************/
  50          /*  Local variable  definitions ('static')
  51          *****************************************************************************/
  52          
  53          /****************************************************************************/
C51 COMPILER V9.59.0.0   PWM                                                               06/27/2023 19:17:32 PAGE 2   

  54          /*  Local function prototypes ('static')
  55          *****************************************************************************/
  56          
  57          /****************************************************************************/
  58          /*  Function implementation - global ('extern') and local('static')
  59          *****************************************************************************/
  60          /********************************************************************************
  61           ** \brief   PWM_ConfigRunMode
  62           **      设置PWM的运行模式
  63           ** \param [in] PWMRunMode:   (1)PWM_WFG_INDEPENDENT
  64           **                (2)PWM_WFG_COMPLEMENTARY
  65           **                (3)PWM_WFG_SYNCHRONIZED
  66           **                (4)PWM_OC_GROUP
  67           **                (5)PWM_OC_INDEPENDENT
  68           ** \return  none
  69           ** \note    以上5种摸式可组合成不同的运行模式，且共用一个8位寄存器
  70           ******************************************************************************/
  71          void PWM_ConfigRunMode( uint8_t PWMRunModeMask)
  72          {
  73   1        PWMCON = PWMRunModeMask;      /*注：直接赋值*/
  74   1      }
  75          /*****************************************************************************
  76           ** \brief   PWM_ConfigChannelClk 
  77          ** \param [in] ChannelNum : PWM0,PWM1,PWM2,PWM3,PWM4,PWM5
  78           **       ClkDiv: (1)PWM_CLK_DIV_1 
  79           **           (2)PWM_CLK_DIV_2
  80           **           (3)PWM_CLK_DIV_4
  81           **           (4)PWM_CLK_DIV_8
  82           **           (5)PWM_CLK_DIV_16
  83           **           (6)PWM_CLK_DIV_32
  84           ** \return  none 
  85           ** \note 
  86           ** (1)例因为PWM01PSC共同控制PWM0、PWM1通道 ，所以此函数统一设置PWMPSC=0x01
  87           ** 若需要其他的分频，请酌情对寄存器赋值
  88           ** (2)PWM 分频分为两级：PWMxPSC PWMnDIV 
  89           ** 第一级分频(PWMxPSC)：0x00 预分频停止并且计数器停止，系统时钟分频系数PWMxPSC+1
  90           ** 第二级分频（PWMnDIV): 0x00 FPWMPSC/2; 0x01 FPWMPSC/4；0x02:FPWMPSC/8；0x3 FPWMPSC/16
  91           ** 0x04 FPWMPSC ; 其他 Fsys 
  92           ** 分频级数：1~4096，例Fsys=8M，PWM的频率范围：1.95k ~ 8M  
  93          *****************************************************************************/
  94          void PWM_ConfigChannelClk(uint8_t ChannelNum,uint8_t ClkDiv)
  95          {
  96   1        switch(ChannelNum)
  97   1        {
  98   2          case PWM0:
  99   2             PWM01PSC = 0x01;
 100   2             PWM0DIV = ClkDiv;
 101   2            break;
 102   2          case PWM1:
 103   2            PWM01PSC = 0x01;
 104   2            PWM1DIV = ClkDiv;
 105   2            break;
 106   2          case PWM2:
 107   2             PWM23PSC = 0x01;
 108   2             PWM2DIV = ClkDiv;
 109   2             break;
 110   2          case PWM3:
 111   2             PWM23PSC = 0x01;
 112   2             PWM3DIV = ClkDiv;
 113   2             break; 
 114   2          case PWM4:
 115   2             PWM45PSC = 0x01;
C51 COMPILER V9.59.0.0   PWM                                                               06/27/2023 19:17:32 PAGE 3   

 116   2             PWM4DIV = ClkDiv;
 117   2             break;       
 118   2          case PWM5:
 119   2             PWM45PSC = 0x01;
 120   2             PWM5DIV = ClkDiv;
 121   2             break;   
 122   2          default:
 123   2            break;
 124   2        }
 125   1      }
 126          /*****************************************************************************
 127           ** \brief   PWM_ConfigChannelPeriod
 128           **      设置PWM通道的频率以及占空比
 129           ** \param [in] ChannelNum : PWM0,PWM1,PWM2,PWM3,PWM4,PWM5
 130           **       Period: 16位周期值
 131           ** \return none
 132           ** \note    
 133           ****************************************************************************/
 134          void PWM_ConfigChannelPeriod(uint8_t ChannelNum,uint16_t Period)
 135          { 
 136   1        switch(ChannelNum)
 137   1        {
 138   2          case PWM0:
 139   2            PWMP0H = Period>>8;
 140   2            PWMP0L = Period;
 141   2            PWMLOADEN |= PWM_CH_0_MSK;
 142   2            break;
 143   2          case PWM1:
 144   2            PWMP1H = Period>>8;
 145   2            PWMP1L = Period;
 146   2            PWMLOADEN |= PWM_CH_1_MSK;
 147   2            break;
 148   2          case PWM2:
 149   2            PWMP2H = Period>>8;
 150   2            PWMP2L = Period;
 151   2            PWMLOADEN |= PWM_CH_2_MSK;
 152   2            break;
 153   2          case PWM3:
 154   2            PWMP3H = Period>>8;
 155   2            PWMP3L = Period;
 156   2            PWMLOADEN |= PWM_CH_3_MSK;
 157   2            break;  
 158   2          case PWM4:
 159   2            PWMP4H = Period>>8;
 160   2            PWMP4L = Period;
 161   2            PWMLOADEN |= PWM_CH_4_MSK;
 162   2            break;        
 163   2          case PWM5:
 164   2            PWMP5H = Period>>8;
 165   2            PWMP5L = Period;
 166   2            PWMLOADEN |= PWM_CH_5_MSK;
 167   2            break;    
 168   2          default:
 169   2            break;
 170   2        } 
 171   1      }
 172          /*****************************************************************************
 173           ** \brief   PWM_ConfigChannelDuty
 174           **      设置PWM通道占空比
 175           ** \param [in] ChannelNum  :PWM0,PWM1,PWM2,PWM3,PWM4,PWM5
 176           **       Duty: 16位占空比
 177           ** \return none
C51 COMPILER V9.59.0.0   PWM                                                               06/27/2023 19:17:32 PAGE 4   

 178           ** \note   
 179           ****************************************************************************/
 180          void PWM_ConfigChannelDuty(uint8_t ChannelNum,uint16_t Duty)
 181          {
 182   1        switch(ChannelNum)
 183   1        {
 184   2          case PWM0:
 185   2            PWMD0H = Duty>>8;
 186   2            PWMD0L = Duty;
 187   2            PWMLOADEN |= PWM_CH_0_MSK;
 188   2            break;
 189   2          case PWM1:
 190   2            PWMD1H = Duty>>8;
 191   2            PWMD1L = Duty;
 192   2            PWMLOADEN |= PWM_CH_1_MSK;
 193   2            break;
 194   2          case PWM2:
 195   2            PWMD2H = Duty>>8;
 196   2            PWMD2L = Duty;
 197   2            PWMLOADEN |= PWM_CH_2_MSK;
 198   2            break;
 199   2          case PWM3:
 200   2            PWMD3H = Duty>>8;
 201   2            PWMD3L = Duty;
 202   2            PWMLOADEN |= PWM_CH_3_MSK;
 203   2            break;  
 204   2          case PWM4:
 205   2            PWMD4H = Duty>>8;
 206   2            PWMD4L = Duty;
 207   2            PWMLOADEN |= PWM_CH_4_MSK;
 208   2            break;        
 209   2          case PWM5:
 210   2            PWMD5H = Duty>>8;
 211   2            PWMD5L = Duty;
 212   2            PWMLOADEN |= PWM_CH_5_MSK;
 213   2            break;    
 214   2          default:
 215   2            break;
 216   2        }   
 217   1      }
 218           
 219          /****************************************************************************
 220           ** \brief   PWM_EnableOneShotMode
 221           **      开启One-Shot模式
 222           ** \param [in]  ChannelMask   PWM_CH_0_MSK ~ PWM_CH_5_MSK
 223           ** \return  none
 224           ** \note 
 225          *****************************************************************************/
 226          void PWM_EnableOneShotMode(uint8_t ChannelMask)
 227          {     
 228   1        PWMCNTM &= ~ChannelMask;  
 229   1      }
 230          /****************************************************************************
 231           ** \brief   PWM_EnableAutoLoadMode
 232           **      开启自动加载模式
 233           ** \param [in]  ChannelMask   PWM_CH_0_MSK ~ PWM_CH_5_MSK
 234           ** \return  none
 235           ** \note 
 236          *****************************************************************************/
 237          void PWM_EnableAutoLoadMode(uint8_t ChannelMask)
 238          {     
 239   1        PWMCNTM |= ChannelMask; 
C51 COMPILER V9.59.0.0   PWM                                                               06/27/2023 19:17:32 PAGE 5   

 240   1      }
 241          
 242          /****************************************************************************
 243           ** \brief   PWM_EnableSynCount 
 244           **     使能PWMn同步计数
 245           ** \param [in]  none
 246           ** \return  none
 247           ** \note 
 248           ****************************************************************************/
 249          void PWM_EnableSynCount( void)
 250          {     
 251   1        PWMCON |= PWM_PWMCON_PWMRUN_Msk;  
 252   1        _nop_();
 253   1        _nop_();
 254   1        _nop_();
 255   1        _nop_();
 256   1        _nop_();
 257   1        PWMCON &= ~(PWM_PWMCON_PWMRUN_Msk); 
 258   1      }
 259          
 260          /****************************************************************************
 261           ** \brief   PWM_Start    
 262           ** \param [in]  ChannelMask   PWM_CH_0_MSK ~ PWM_CH_5_MSK
 263           ** \return  none
 264           ** \note 
 265           ****************************************************************************/
 266          void PWM_Start( uint8_t ChannelMask)
 267          {     
 268   1        PWMCNTE |= ChannelMask;   /*使能PWMn计数器*/
 269   1      }
 270          /*****************************************************************************
 271           ** \brief   PWM_Stop
 272           **
 273           ** \param [in] ChannelMask  : PWM_CH_0_MSK ~ PWM_CH_5_MSK
 274           ** \return  none
 275           ** \note    
 276          *****************************************************************************/
 277          void PWM_Stop( uint8_t ChannelMask)
 278          {
 279   1        PWMCNTE &= ~ ChannelMask;   /*停止计数*/
 280   1      }
 281          
 282          /*****************************************************************************
 283           ** \brief   PWM_EnableOutput
 284           **      开启PWM输出
 285           ** \param [in]  ChannelMask   PWM_CH_0_MSK ~ PWM_CH_5_MSK   
 286           ** \return  none
 287           ** \note   
 288          *****************************************************************************/
 289          void PWM_EnableOutput( uint8_t ChannelMask)
 290          {
 291   1        PWMOE |= ChannelMask;   /*使能PWM输出*/ 
 292   1      }
 293          /*****************************************************************************
 294           ** \brief   PWM_DisableOutput
 295           **      关闭PWM输出
 296           ** \param [in]  ChannelMask   PWM_CH_0_MSK ~ PWM_CH_5_MSK
 297           ** \return  none
 298           ** \note    
 299          *****************************************************************************/
 300          void PWM_DisableOutput( uint8_t ChannelMask)
 301          {
C51 COMPILER V9.59.0.0   PWM                                                               06/27/2023 19:17:32 PAGE 6   

 302   1        PWMOE &= ~(ChannelMask);    
 303   1      }
 304          
 305          /****************************************************************************
 306           ** \brief   PWM_EnableDeadZone
 307           **      开启死区
 308           ** \param [in] Channel: PWM0、PWM1....PWM5   
 309           **     DeadTime : 死区时间( 0~0xFF) = DeadTime * TPWM
 310           ** \return  none
 311           ** \note  
 312          *****************************************************************************/
 313          void PWM_EnableDeadZone( uint8_t Channel, uint8_t DeadTime)
 314          {
 315   1        switch(Channel)
 316   1        {
 317   2          case PWM0:
 318   2          case PWM1:
 319   2            PWMDTE  |= PWM_PWMDTE_PWM01DTE_Msk;
 320   2            PWM01DT = DeadTime;
 321   2            break;
 322   2          case PWM2:
 323   2          case PWM3:
 324   2            PWMDTE  |= PWM_PWMDTE_PWM23DTE_Msk;
 325   2            PWM23DT = DeadTime;
 326   2            break;
 327   2          case PWM4:
 328   2          case PWM5:
 329   2            PWMDTE  |= PWM_PWMDTE_PWM45DTE_Msk;
 330   2            PWM45DT = DeadTime;
 331   2            break;
 332   2          default:
 333   2            break;    
 334   2        } 
 335   1      }
 336          /*****************************************************************************
 337           ** \brief   PWM_DisableDeadZone
 338           **      关闭PWM死区
 339           ** \param [in] Channel: PWM0、PWM1....PWM5 
 340           ** \return  none
 341           ** \note  
 342          *****************************************************************************/
 343          void PWM_DisableDeadZone( uint8_t Channel)
 344          {
 345   1        switch(Channel)
 346   1        {
 347   2          case PWM0:
 348   2          case PWM1:
 349   2            PWMDTE  &= ~(PWM_PWMDTE_PWM01DTE_Msk);
 350   2            break;
 351   2          case PWM2:
 352   2          case PWM3:
 353   2            PWMDTE  &= ~(PWM_PWMDTE_PWM23DTE_Msk);
 354   2            break;
 355   2          case PWM4:
 356   2          case PWM5:
 357   2            PWMDTE  &= ~(PWM_PWMDTE_PWM45DTE_Msk);
 358   2            break;
 359   2          default:
 360   2            break;    
 361   2        } 
 362   1      }
 363          
C51 COMPILER V9.59.0.0   PWM                                                               06/27/2023 19:17:32 PAGE 7   

 364          /*****************************************************************************
 365           ** \brief   PWM_EnableDownCmpInt
 366           **      开启向下比较中断
 367           ** \param [in]ChannelMask : PWM_CH_0_MSK ~ PWM_CH_5_MSK  
 368           ** \return  none
 369           ** \note   
 370          *****************************************************************************/
 371          void PWM_EnableDownCmpInt( uint8_t ChannelMask)
 372          {
 373   1        PWMDIE  |= ChannelMask;
 374   1      }
 375          /*****************************************************************************
 376           ** \brief   PWM_DisableDownCmpInt
 377           **      关闭向下比较中断
 378           ** \param [in]  ChannelMask : PWM_CH_0_MSK ~ PWM_CH_5_MSK  
 379           ** \return  none
 380           ** \note   
 381          *****************************************************************************/
 382          void PWM_DisableDownCmpInt( uint8_t ChannelMask)
 383          {
 384   1        PWMDIE  &= ~ChannelMask;  
 385   1      }
 386          /*****************************************************************************
 387           ** \brief   PWM_GetUpCmpIntFlag
 388           **      获取向下比较中断标志位
 389           ** \param [in] ChannelNum: PWM0,PWM1,PWM2,PWM3,PWM4,PWM5
 390           ** \return  0: 无中断产生
 391           **          1：有中断产生
 392           ** \note   
 393          *****************************************************************************/
 394          uint8_t PWM_GetDownCmpIntFlag( uint8_t ChannelNum)
 395          {
 396   1        return(PWMDIF & (1<<ChannelNum)? 1:0);
 397   1      }
 398          /*****************************************************************************
 399           ** \brief   PWM_ClearUpCmpIntFlag
 400           **      清除向下比较中断标志位
 401           ** \param [in]  ChannelNum :PWM0,PWM1,PWM2,PWM3,PWM4,PWM5
 402           ** \return  none
 403           ** \note   
 404          *****************************************************************************/
 405          void PWM_ClearDownCmpIntFlag( uint8_t ChannelNum)
 406          {
 407   1        PWMDIF = 0xff & (~(1<<ChannelNum));
 408   1      }
 409          
 410          /*****************************************************************************
 411           ** \brief   PWM_EnableZeroInt
 412           **      开启零点中断
 413           ** \param [in] ChannelMask: PWM_CH_0_MSK ~ PWM_CH_5_MSK  
 414           ** \return   none     
 415           ** \note   
 416          *****************************************************************************/
 417          void PWM_EnableZeroInt( uint8_t ChannelMask)
 418          {
 419   1        PWMZIE |= ChannelMask;
 420   1      }
 421          /*****************************************************************************
 422           ** \brief   PWM_DisableZeroInt
 423           **      关闭零点中断 
 424           ** \param [in]ChannelMask: PWM_CH_0_MSK ~ PWM_CH_5_MSK 
 425           ** \return   none     
C51 COMPILER V9.59.0.0   PWM                                                               06/27/2023 19:17:32 PAGE 8   

 426           ** \note   
 427          *****************************************************************************/
 428          void PWM_DisableZeroInt( uint8_t ChannelMask)
 429          {
 430   1        PWMZIE &= ~ChannelMask;
 431   1      }
 432          /*****************************************************************************
 433           ** \brief   PWM_ClearZeroIntFlag
 434           **      清除零点中断标志位
 435           ** \param [in]  ChannelNum: PWM0,PWM1,PWM2,PWM3,PWM4,PWM5
 436           ** \return   none     
 437           ** \note   
 438          *****************************************************************************/
 439          void PWM_ClearZeroIntFlag( uint8_t ChannelNum)
 440          {
 441   1        PWMZIF = 0xff & (~(1<<ChannelNum));
 442   1      }
 443          /*****************************************************************************
 444           ** \brief   PWM_GetZeroIntFlag
 445           **      获取零点中断标志位 
 446           ** \param [in] ChannelNum: PWM0,PWM1,PWM2,PWM3,PWM4,PWM5
 447           ** \return   0：无中断产生
 448           **           1：有中断产生   
 449           ** \note   
 450           *****************************************************************************/
 451          uint8_t PWM_GetZeroIntFlag( uint8_t ChannelNum)
 452          {
 453   1        return(PWMZIF & (1<<ChannelNum)? 1:0);
 454   1      }
 455          
 456          /*****************************************************************************
 457           ** \brief   PWM_EnableReverseOutput
 458           **      开启反向输出
 459           ** \param [in] ChannelMask : PWM_CH_0_MSK ~ PWM_CH_5_MSK 
 460           ** \return  none
 461           ** \note  
 462          *****************************************************************************/
 463          void  PWM_EnableReverseOutput( uint8_t ChannelMask)
 464          {
 465   1        PWMPINV |=ChannelMask;
 466   1      }
 467          /*****************************************************************************
 468           ** \brief   PWM_DisableReverseOutput
 469           **      关闭反向输出
 470           ** \param [in] ChannelMask: PWM_CH_0_MSK ~ PWM_CH_5_MSK  
 471           ** \return  none
 472           ** \note   
 473          *****************************************************************************/
 474          void  PWM_DisableReverseOutput( uint8_t ChannelMask)
 475          {
 476   1        PWMPINV &=~ChannelMask;
 477   1      }
 478          /*****************************************************************************
 479           ** \brief   PWM_AllIntEnable
 480           **      使能PWM总中断
 481           ** \param [in] none
 482           ** \return  none
 483           ** \note   
 484          *****************************************************************************/
 485          void  PWM_AllIntEnable(void)
 486          {
 487   1        EIE2 |= IRQ_EIE2_PWMIE_Msk;
C51 COMPILER V9.59.0.0   PWM                                                               06/27/2023 19:17:32 PAGE 9   

 488   1      }
 489          /*****************************************************************************
 490           ** \brief   PWM_AllIntDisable
 491           **      关闭PWM总中断
 492           ** \param [in] none
 493           ** \return  none
 494           ** \note   
 495           ****************************************************************************/
 496          void  PWM_AllIntDisable(void)
 497          {
 498   1        EIE2 &= ~(IRQ_EIE2_PWMIE_Msk);
 499   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    690    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
