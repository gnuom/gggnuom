C51 COMPILER V9.59.0.0   SUBPROG                                                           06/27/2023 19:17:34 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SUBPROG
OBJECT MODULE PLACED IN ..\OBJ\subprog.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\USER\mid\subprog.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\CORE;..\FW
                    -Lib\inc;..\SYSTEM;..\USER\app;..\TOUCHLib;..\USER\driver;..\USER\event;..\USER\mid) DEBUG PRINT(..\OBJ\subprog.lst) TABS
                    -(2) OBJECT(..\OBJ\subprog.obj)

line level    source

   1          
   2          #define __EXT_SUBPROG_
   3          #include "Globals.h"
   4          
   5          ///////////////////////////////////////////////////////////////////////////////////////////////////
   6          void sub_memset(uint8_t *buf, uint8_t ch, uint16_t len)
   7          {
   8   1        uint16_t i;
   9   1        for(i = 0; i < len; i++)
  10   1          buf[i] = ch;
  11   1      }
  12          
  13          void sub_memcpy(uint8_t *src, uint8_t *dst, uint16_t len)
  14          {
  15   1        uint16_t i;
  16   1        for(i = 0; i < len; i++)
  17   1          dst[i] = src[i];
  18   1      }
  19          
  20          /*
  21          bool_t sub_memcmp(uint8_t xdata *buf1, uint8_t xdata *buf2, uint8_t len)
  22          {
  23            uint8_t i;
  24            for(i = 0; i < len; i++)
  25            {
  26              if(buf1[i] != buf2[i])
  27                return FALSE;
  28            }
  29          
  30            return TRUE;
  31          }
  32          */
  33          
  34          uint8_t sub_getchecksum(uint8_t *buf, uint16_t len)
  35          {
  36   1        uint16_t i;
  37   1        uint8_t sum;
  38   1      
  39   1        sum = 0;
  40   1        for(i = 0; i < len; i++)
  41   1          sum += buf[i];
  42   1      
  43   1        return sum;
  44   1      }
  45          
  46          uint16_t sub_getchecksum_u16(uint8_t *buf, uint16_t len)
  47          {
  48   1        uint16_t i;
  49   1        uint16_t sum;
  50   1      
  51   1        sum = 0;
  52   1        for(i = 0; i < len; i++)
  53   1          sum += buf[i];
C51 COMPILER V9.59.0.0   SUBPROG                                                           06/27/2023 19:17:34 PAGE 2   

  54   1      
  55   1        return sum;
  56   1      }
  57          
  58          
  59          uint16_t sub_getaveragev(uint16_t *buf, uint8_t len)
  60          {
  61   1        uint8_t i;
  62   1        uint32_t sum;
  63   1      
  64   1        sum = 0;
  65   1        for(i = 0; i < len; i++)
  66   1          sum += buf[i];
  67   1      
  68   1        return (uint16_t)(sum / len);
  69   1      }
  70          
  71          //大、小端交换
  72          uint16_t swapBigLittle(uint16_t iData)
  73          {
  74   1        uint16_t tmpL, tmpH;
  75   1        
  76   1        tmpL = iData >> 8;
  77   1        tmpH = iData << 8;
  78   1        
  79   1        return (tmpH | tmpL);
  80   1      }
  81          
  82          //字符串转数字
  83          uint8_t sub_atoi(char *str)
  84          {
  85   1        uint8_t nResult = 0;
  86   1        
  87   1        if(str == NULL)
  88   1        {
  89   2          return 0;
  90   2        }
  91   1        
  92   1        while((*str >= '0') && (*str <= '9'))
  93   1        {
  94   2          nResult = nResult * 10 + (*str - '0'); 
  95   2        }
  96   1        return nResult;
  97   1      }
  98          
  99          //数字转字符串：n - 要转化的数字，radix转换基数，如：10、16、8、2
 100          void sub_itos(int n, char *str, int radix)
 101          {
 102   1        int i = 0;
 103   1        int m = n;
 104   1        int f = 0;
 105   1        
 106   1        if(n == 0)
 107   1        {
 108   2          str[0] = '0';
 109   2          str[1] = '\0';
 110   2          return;
 111   2        }
 112   1        else if(n < 0)
 113   1        {
 114   2          str[0] = '-';
 115   2          n = -n;
C51 COMPILER V9.59.0.0   SUBPROG                                                           06/27/2023 19:17:34 PAGE 3   

 116   2          f = 1;
 117   2        }
 118   1        
 119   1        while(m)
 120   1        {
 121   2          m /= radix;
 122   2          i++;
 123   2        }
 124   1        
 125   1        str[i + f] = '\0';
 126   1        i--;
 127   1        
 128   1        while(n)
 129   1        {
 130   2          str[i + f] = n % radix;
 131   2          if(str[i + f] < 10)
 132   2          {
 133   3            str[i + f] += '0';
 134   3          }
 135   2          else
 136   2          {
 137   3            str[i + f] += ('a' - 10);
 138   3          }
 139   2          n /= radix;
 140   2          i--;
 141   2        }
 142   1      }
 143          
 144          //字符串长度函数
 145          uint8_t sub_Strlen(char str[])
 146          {
 147   1        uint8_t len = 0;
 148   1        
 149   1        while (str[len] != '\0')
 150   1        {
 151   2          len++;
 152   2        }
 153   1        return len;
 154   1      }
 155          
 156          //字符串拷贝函数
 157          void sub_Strcpy(char str1[], char str2[])
 158          {
 159   1        uint8_t len = 0;
 160   1        
 161   1        while (str2[len] != '\0' || str1[len] != '\0')
 162   1        {
 163   2          str1[len] = str2[len];
 164   2          len++;
 165   2        }
 166   1        str1[len] = '\0';
 167   1      }
 168          
 169          //字符串拷贝N个函数
 170          void sub_nStrcpy(char str1[], char str2[], uint8_t n)
 171          {
 172   1        uint8_t i;
 173   1        uint8_t len = 0;
 174   1        
 175   1        for(i = 0; i < n; i++)
 176   1        {
 177   2          if(str2[len] == '\0')
C51 COMPILER V9.59.0.0   SUBPROG                                                           06/27/2023 19:17:34 PAGE 4   

 178   2          {
 179   3            break;
 180   3          }
 181   2          str1[len] = str2[len];
 182   2          len++;
 183   2        }
 184   1        str1[len] = '\0';
 185   1      }
 186          
 187          //字符串拼接函数
 188          void sub_Strcat(char str1[], char str2[])
 189          {
 190   1        uint8_t len = 0;
 191   1        uint8_t len1 = 0;
 192   1        
 193   1        while (str1[len] != '\0')
 194   1        {
 195   2          len++;
 196   2        }
 197   1        while (str2[len1] != '\0')
 198   1        {
 199   2          str1[len] = str2[len1];
 200   2          len++;
 201   2          len1++;
 202   2        }
 203   1        str1[len] = '\0';
 204   1      }
 205          
 206          //字符串比较函数
 207          int8_t sub_Strcmp(char str1[], char str2[])
 208          {
 209   1        int len = 0;
 210   1      
 211   1        while((str1[len] != '\0') || (str2[len] != '\0'))
 212   1        {
 213   2          if(str1[len] > str2[len])
 214   2          {
 215   3            return 1;
 216   3          }
 217   2          else if(str1[len] < str2[len])
 218   2          {
 219   3            return -1;
 220   3          }
 221   2          else
 222   2          {
 223   3            len++;
 224   3          }
 225   2        }
 226   1        return 0;
 227   1      }
 228          
 229          //字符查找
 230          char * sub_Strchr(char *str, char ch)
 231          {   
 232   1        while (*str != '\0')
 233   1        {
 234   2          if(*str == ch)
 235   2          {
 236   3            return str;
 237   3          }
 238   2          str++;
 239   2        }
C51 COMPILER V9.59.0.0   SUBPROG                                                           06/27/2023 19:17:34 PAGE 5   

 240   1        return NULL;
 241   1      }
 242          
 243          //字符串的查找 
 244          char * sub_Strstr(char *str1, char *str2)
 245          {
 246   1        char *p = str1;  
 247   1        char *str2Begin = str2;
 248   1        
 249   1        while (*str1 != '\0')
 250   1        {
 251   2          p = str1;     
 252   2          str2 = str2Begin;  
 253   2          while (*str1 == *str2 || *str2 == '\0')
 254   2          { 
 255   3            if(*str2 == '\0') 
 256   3            {
 257   4              return p;
 258   4            }
 259   3            str2++;  
 260   3            str1++;
 261   3          }
 262   2          str1 = p; 
 263   2          str1++;  
 264   2        }
 265   1        return NULL;
 266   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1197    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      92
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
