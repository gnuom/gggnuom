C51 COMPILER V9.59.0.0   SYSTEM                                                            06/27/2023 19:17:31 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SYSTEM
OBJECT MODULE PLACED IN ..\OBJ\system.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\FWLib\src\system.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\CORE;..\FW
                    -Lib\inc;..\SYSTEM;..\USER\app;..\TOUCHLib;..\USER\driver;..\USER\event;..\USER\mid) DEBUG PRINT(..\OBJ\system.lst) TABS(
                    -2) OBJECT(..\OBJ\system.obj)

line level    source

   1          /*******************************************************************************
   2          * Copyright (C) 2019 China Micro Semiconductor Limited Company. All Rights Reserved.
   3          *
   4          * This software is owned and published by:
   5          * CMS LLC, No 2609-10, Taurus Plaza, TaoyuanRoad, NanshanDistrict, Shenzhen, China.
   6          *
   7          * BY DOWNLOADING, INSTALLING OR USING THIS SOFTWARE, YOU AGREE TO BE BOUND
   8          * BY ALL THE TERMS AND CONDITIONS OF THIS AGREEMENT.
   9          *
  10          * This software contains source code for use with CMS
  11          * components. This software is licensed by CMS to be adapted only
  12          * for use in systems utilizing CMS components. CMS shall not be
  13          * responsible for misuse or illegal use of this software for devices not
  14          * supported herein. CMS is providing this software "AS IS" and will
  15          * not be responsible for issues arising from incorrect user implementation
  16          * of the software.
  17          *
  18          * This software may be replicated in part or whole for the licensed use,
  19          * with the restriction that this Disclaimer and Copyright notice must be
  20          * included with each copy of this software, whether used in part or whole,
  21          * at all times.
  22          */
  23          
  24          /****************************************************************************/
  25          /** \file system.c
  26          **
  27          **  
  28          **
  29          **  History:
  30          **  
  31          *****************************************************************************/
  32          /****************************************************************************/
  33          /*  include files
  34          *****************************************************************************/
  35          #include "system.h"
  36          
  37          /****************************************************************************/
  38          /*  Local pre-processor symbols/macros('#define')
  39          ****************************************************************************/
  40          
  41          /****************************************************************************/
  42          /*  Global variable definitions(declared in header file with 'extern')
  43          ****************************************************************************/
  44          
  45          /****************************************************************************/
  46          /*  Local type definitions('typedef')
  47          ****************************************************************************/
  48          
  49          /****************************************************************************/
  50          /*  Local variable  definitions('static')
  51          ****************************************************************************/
  52          
  53          /****************************************************************************/
C51 COMPILER V9.59.0.0   SYSTEM                                                            06/27/2023 19:17:31 PAGE 2   

  54          /*  Local function prototypes('static')
  55          ****************************************************************************/
  56          
  57          /****************************************************************************/
  58          /*  Function implementation - global ('extern') and local('static')
  59          ****************************************************************************/
  60          /*****************************************************************************
  61           ** \brief   SYS_ConfigSystemClk
  62           **      配置系统时钟
  63           ** \param [in] SystemClkMode : (1)SYS_CLK_LSI: 内部低速时钟
  64           **               (2)SYS_CLK_LSE: 外部低速时钟
  65           **               (3)SYS_CLK_HSE: 外部高速时钟
  66           **               (4)SYS_CLK_HSI: 内部高速时钟
  67           ** \return  0:配置失败  1：配置成功
  68           ** \note  
  69          *****************************************************************************/
  70          uint8_t SYS_ConfigSystemClk(uint8_t SystemClkMode)
  71          {
  72   1        uint16_t WaitTime = 60000;
  73   1        uint8_t temp;
  74   1        temp = (SYS_SCKSEL_SEL_Msk | SystemClkMode);
  75   1        if (EA == 1)//操作TA时序时不允许被打断，因而需要关闭中断
  76   1        {
  77   2          EA = 0;
  78   2          TA = 0xAA;
  79   2          TA = 0x55;
  80   2          SCKSEL = temp;
  81   2          EA = 1;
  82   2        }
  83   1        else
  84   1        {
  85   2          TA = 0xAA;
  86   2          TA = 0x55;
  87   2          SCKSEL = temp;
  88   2        }
  89   1        
  90   1        temp = temp | SYS_SCKSEL_WRITE_Msk;
  91   1        do{
  92   2          if(SCKSTAU & (1<< SystemClkMode))
  93   2          {
  94   3                  if (EA == 1)//操作TA时序时不允许被打断，因而需要关闭中断
  95   3            {
  96   4              EA = 0;
  97   4              TA = 0xAA;
  98   4              TA = 0x55;
  99   4              SCKSEL = temp;    
 100   4              _nop_();
 101   4              _nop_();
 102   4              _nop_();
 103   4              _nop_();
 104   4              _nop_();
 105   4              EA = 1;
 106   4            }
 107   3            else
 108   3            {
 109   4              TA = 0xAA;
 110   4              TA = 0x55;
 111   4              SCKSEL = temp;    
 112   4              _nop_();
 113   4              _nop_();
 114   4              _nop_();
 115   4              _nop_();
C51 COMPILER V9.59.0.0   SYSTEM                                                            06/27/2023 19:17:31 PAGE 3   

 116   4              _nop_();
 117   4            }
 118   3            return 1;
 119   3          }
 120   2        }
 121   1        while(WaitTime--);
 122   1        return 0;
 123   1      }
 124          
 125          /*****************************************************************************
 126           ** \brief   SYS_EnableSoftwareReset
 127           **      使能软件复位System
 128           ** \param [in] none
 129           ** \return none
 130           ** \note
 131           *****************************************************************************/
 132          void SYS_EnableSoftwareReset(void)
 133          {
 134   1        if (EA == 1)//操作TA时序时不允许被打断，因而需要关闭中断
 135   1        {
 136   2          EA = 0;
 137   2          TA = 0xAA;
 138   2          TA = 0x55;
 139   2          WDCON |= WDT_WDCON_SWRST_Msk;
 140   2          EA = 1;
 141   2        }
 142   1        else
 143   1        {
 144   2          TA = 0xAA;
 145   2          TA = 0x55;
 146   2          WDCON |= WDT_WDCON_SWRST_Msk;
 147   2        } 
 148   1      
 149   1      }
 150          /*****************************************************************************
 151           ** \brief   SYS_DisableSoftwareReset
 152           **      关闭软件复位System
 153           ** \param [in] none
 154           ** \return none
 155           ** \note
 156           *****************************************************************************/
 157          void SYS_DisableSoftwareReset(void)
 158          {
 159   1        if (EA == 1)//操作TA时序时不允许被打断，因而需要关闭中断
 160   1        {
 161   2          EA = 0;
 162   2          TA = 0xAA;
 163   2          TA = 0x55;
 164   2          WDCON &= ~(WDT_WDCON_SWRST_Msk);
 165   2          EA = 1;
 166   2        }
 167   1        else
 168   1        {
 169   2          TA = 0xAA;
 170   2          TA = 0x55;
 171   2          WDCON &= ~(WDT_WDCON_SWRST_Msk);
 172   2        }
 173   1      
 174   1      }
 175          
 176          /*****************************************************************************
 177           ** \brief   SYS_GetWDTResetFlag
C51 COMPILER V9.59.0.0   SYSTEM                                                            06/27/2023 19:17:31 PAGE 4   

 178           **      获取WDT复位System的标志
 179           ** \param [in] none
 180           ** \return 0：复位不由WDT溢出引起    1：复位由WDT溢出引起
 181           ** \note
 182           *****************************************************************************/
 183          uint8_t SYS_GetWDTResetFlag(void)
 184          {
 185   1        return((WDCON & WDT_WDCON_WDTRF_Msk)? 1:0);
 186   1      }
 187          /*****************************************************************************
 188           ** \brief   SYS_ClearWDTResetFlag
 189           **      清除WDT复位System的标志
 190           ** \param [in] none
 191           ** \return   none
 192           ** \note
 193           *****************************************************************************/
 194          void SYS_ClearWDTResetFlag(void)
 195          {
 196   1        if (EA == 1)//操作TA时序时不允许被打断，因而需要关闭中断
 197   1        {
 198   2          EA = 0;
 199   2          TA = 0xAA;
 200   2          TA = 0x55;
 201   2          WDCON &= ~(WDT_WDCON_WDTRF_Msk);
 202   2          EA = 1;
 203   2        }
 204   1        else
 205   1        {
 206   2          TA = 0xAA;
 207   2          TA = 0x55;
 208   2          WDCON &= ~(WDT_WDCON_WDTRF_Msk);
 209   2        } 
 210   1        
 211   1      }
 212          
 213          /*****************************************************************************
 214           ** \brief   SYS_GetPowerOnResetFlag
 215           **      获取上电复位System的标志
 216           ** \param [in] none
 217           ** \return   0：复位不由上电复位引起    1：复位由上电复位引起
 218           ** \note
 219           *****************************************************************************/
 220          uint8_t SYS_GetPowerOnResetFlag(void)
 221          {
 222   1        return((WDCON & WDT_WDCON_PORF_Msk)? 1:0);
 223   1      }
 224          /*****************************************************************************
 225           ** \brief   SYS_ClearPowerOnResetFlag
 226           **      清除上电复位System的标志
 227           ** \param [in] none
 228           ** \return   none
 229           ** \note
 230           *****************************************************************************/
 231          void SYS_ClearPowerOnResetFlag(void)
 232          {
 233   1        WDCON &= ~(WDT_WDCON_PORF_Msk); 
 234   1      }
 235          
 236          /*****************************************************************************
 237           ** \brief   SYS_EnableWakeUp
 238           **      使能休眠唤醒
 239           ** \param [in] none
C51 COMPILER V9.59.0.0   SYSTEM                                                            06/27/2023 19:17:31 PAGE 5   

 240           ** \return none
 241           ** \note  
 242           *****************************************************************************/
 243          void SYS_EnableWakeUp(void)
 244          {
 245   1        PCON |= SYS_PCON_SWE_Msk;
 246   1      }
 247          /*****************************************************************************
 248           ** \brief   SYS_EnableWakeUp
 249           **      关闭休眠唤醒
 250           ** \param [in] none
 251           ** \return none
 252           ** \note 
 253           *****************************************************************************/
 254          void SYS_DisableWakeUp(void)
 255          {
 256   1        PCON &= ~(SYS_PCON_SWE_Msk);
 257   1      }
 258          
 259          /*****************************************************************************
 260           ** \brief   SYS_EnterStop
 261           **      进入休眠中STOP状态
 262           ** \param [in] none
 263           ** \return none
 264           ** \note 
 265           *****************************************************************************/
 266          void SYS_EnterStop(void)
 267          {
 268   1        _nop_();
 269   1        _nop_();
 270   1        PCON |= SYS_PCON_STOP_Msk;
 271   1        _nop_();
 272   1        _nop_();  
 273   1        _nop_();
 274   1        _nop_();
 275   1        _nop_();
 276   1        _nop_();
 277   1      }
 278          /*****************************************************************************
 279           ** \brief   SYS_EnterIdle
 280           **      进入休眠模式中Idle状态
 281           ** \param [in] none
 282           ** \return none
 283           ** \note   
 284           *****************************************************************************/
 285          void SYS_EnterIdle(void)
 286          {
 287   1        _nop_();
 288   1        _nop_();
 289   1        PCON |= SYS_PCON_IDLE_Msk;
 290   1        _nop_();
 291   1        _nop_();  
 292   1        _nop_();
 293   1        _nop_();
 294   1        _nop_();
 295   1        _nop_();
 296   1      }
 297          
 298          /*****************************************************************************
 299           ** \brief   SYS_EnableSCM
 300           **      使能停振监测功能
 301           ** \param [in] none
C51 COMPILER V9.59.0.0   SYSTEM                                                            06/27/2023 19:17:31 PAGE 6   

 302           ** \return none
 303           ** \note   
 304           *****************************************************************************/
 305          void SYS_EnableSCM(void)
 306          {
 307   1        XT_SCM |= SYS_XTSCM_SCMEN_Msk;
 308   1      }
 309          /*****************************************************************************
 310           ** \brief   SYS_DisableSCM
 311           **      关闭停振监测功能
 312           ** \param [in] none
 313           ** \return none
 314           ** \note   
 315           *****************************************************************************/
 316          void SYS_DisableSCM(void)
 317          {
 318   1        XT_SCM &= ~(SYS_XTSCM_SCMEN_Msk);
 319   1      }
 320          
 321          /*****************************************************************************
 322           ** \brief   SYS_EnableSCMInt
 323           **      使能停振监测中断功能
 324           ** \param [in] none
 325           ** \return none
 326           ** \note   
 327           *****************************************************************************/
 328          void SYS_EnableSCMInt(void)
 329          {
 330   1        XT_SCM |= SYS_XTSCM_SCMIE_Msk;  
 331   1      }
 332          /*****************************************************************************
 333           ** \brief   SYS_DisableSCMInt
 334           **      关闭停振监测中断功能
 335           ** \param [in] none
 336           ** \return none
 337           ** \note   
 338           *****************************************************************************/
 339          void SYS_DisableSCMInt(void)
 340          {
 341   1        XT_SCM &= ~(SYS_XTSCM_SCMIE_Msk);
 342   1      }
 343          /*****************************************************************************
 344           ** \brief   SYS_GetSCMIntFlag
 345           **      获取停振监测中断标志位
 346           ** \param [in] none
 347           ** \return  0:无中断 1：有中断
 348           ** \note  
 349          *****************************************************************************/
 350          uint8_t SYS_GetSCMIntFlag(void)
 351          {
 352   1        return((XT_SCM & SYS_XTSCM_SCMIF_Msk)? 1:0);
 353   1      }
 354          /*****************************************************************************
 355           ** \brief   SYS_GetSCMState
 356           **      获取停振监测状态位位
 357           ** \param [in] none
 358           ** \return  0:停振恢复 1：停振
 359           ** \note  
 360          *****************************************************************************/
 361          uint8_t SYS_GetSCMState(void)
 362          {
 363   1        return((XT_SCM & SYS_XTSCM_SCMSTA_Msk)? 1:0);
C51 COMPILER V9.59.0.0   SYSTEM                                                            06/27/2023 19:17:31 PAGE 7   

 364   1      }
 365          /*****************************************************************************
 366           ** \brief   SYS_ClearSCMIntFlag
 367           **      清除停振监测中断标志位
 368           ** \param [in] none
 369           ** \return  none
 370           ** \note  
 371          *****************************************************************************/
 372          void SYS_ClearSCMIntFlag(void)
 373          {
 374   1        XT_SCM &= ~(SYS_XTSCM_SCMIF_Msk); 
 375   1      }
 376          
 377          
 378          /*****************************************************************************
 379           ** \brief   SYS_EnableLVD
 380           **      开启电压监测功能
 381           ** \param [in] none
 382           ** \return  none
 383           ** \note  
 384          *****************************************************************************/
 385          void SYS_EnableLVD(void)
 386          {
 387   1        LVDCON |= LVD_LVDCON_LVDEN_Msk;
 388   1      }
 389          /*****************************************************************************
 390           ** \brief   SYS_DisableLVD
 391           **       关闭电压监测功能
 392           ** \param [in] none
 393           ** \return  none
 394           ** \note  
 395          *****************************************************************************/
 396          void SYS_DisableLVD(void)
 397          {
 398   1        LVDCON &= ~(LVD_LVDCON_LVDEN_Msk);  
 399   1      }
 400          /*****************************************************************************
 401            ** \brief  SYS_ConfigLVD
 402           **      配置系统电压监测电压
 403           ** \param [in] LVDValue :(1)SYS_LVD_2_0V   LVD电压监测点2.0V          
 404                      (2) SYS_LVD_2_2V    LVD电压监测点2.2V
 405                      (3) SYS_LVD_2_4V    LVD电压监测点2.4V
 406                      (4) SYS_LVD_2_7V    LVD电压监测点2.7V
 407                      (5) SYS_LVD_3_0V    LVD电压监测点3.0V
 408                      (6) SYS_LVD_3_7V    LVD电压监测点3.7V
 409                      (7) SYS_LVD_4_0V    LVD电压监测点4.0V
 410                      (8) SYS_LVD_4_3V    LVD电压监测点4.3V
 411           ** \return  none
 412           ** \note  
 413          *****************************************************************************/
 414          void SYS_ConfigLVD(uint8_t LVDValue)
 415          {
 416   1        LVDCON &= ~(LVD_LVDCON_LVDSEL_Msk);
 417   1        LVDCON |= LVDValue; 
 418   1      }
 419          
 420          /*****************************************************************************
 421           ** \brief   SYS_EnableLVDInt
 422           **      开启电压监测中断功能
 423           ** \param [in] none
 424           ** \return  none
 425           ** \note  
C51 COMPILER V9.59.0.0   SYSTEM                                                            06/27/2023 19:17:31 PAGE 8   

 426          *****************************************************************************/
 427          void SYS_EnableLVDInt(void)
 428          {
 429   1        LVDCON |= LVD_LVDCON_LVDINTE_Msk; 
 430   1      }
 431          /*****************************************************************************
 432           ** \brief   SYS_DisableLVDInt
 433           **       关闭电压监测中断功能
 434           ** \param [in] none
 435           ** \return  none
 436           ** \note  
 437          *****************************************************************************/
 438          void SYS_DisableLVDInt(void)
 439          {
 440   1        LVDCON &= ~(LVD_LVDCON_LVDINTE_Msk);  
 441   1      }
 442          
 443          /*****************************************************************************
 444           ** \brief   SYS_GetLVDIntFlag
 445           **      获取LVD中断标志位
 446           ** \param [in] none
 447           ** \return  0:无中断 1：有中断
 448           ** \note  
 449          *****************************************************************************/
 450          uint8_t SYS_GetLVDIntFlag(void)
 451          {
 452   1        return((LVDCON & LVD_LVDCON_LVDINTF_Msk)? 1:0);
 453   1      }
 454          
 455          /*****************************************************************************
 456           ** \brief   SYS_ClearLVDIntFlag
 457           **      清除LVD中断标志位
 458           ** \param [in] none
 459           ** \return  none
 460           ** \note  
 461          *****************************************************************************/
 462          void SYS_ClearLVDIntFlag(void)
 463          {
 464   1        LVDCON  &= ~(LVD_LVDCON_LVDINTF_Msk);
 465   1      }
 466          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    379    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
