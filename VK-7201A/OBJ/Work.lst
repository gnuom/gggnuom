C51 COMPILER V9.59.0.0   WORK                                                              06/27/2023 19:17:34 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE WORK
OBJECT MODULE PLACED IN ..\OBJ\Work.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\USER\event\Work.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\CORE;..\FWL
                    -ib\inc;..\SYSTEM;..\USER\app;..\TOUCHLib;..\USER\driver;..\USER\event;..\USER\mid) DEBUG PRINT(..\OBJ\Work.lst) TABS(2) 
                    -OBJECT(..\OBJ\Work.obj)

line level    source

   1          
   2          #define __EXT_WORKING_
   3          #include "Globals.h"
   4          
   5          ///////////////////////////////////////////////////////////////////////////////////////////////////
   6          #define cnWorkingRunTBase     cnTBaseT_100ms
   7          #define cnWorkingRunT       (3*60UL*60UL*(1000UL/cnWorkingRunTBase))  // 分钟
   8          #define cnWorkingSelectT      (5*60UL*(1000UL/cnWorkingRunTBase))   // 
   9          #define cnWorkingEndingT      (3*60UL*(1000UL/cnWorkPHTBase))   // 
  10          
  11          
  12          static uint32_t WorkingRunTmr;
  13          bool_t bIsWorkingStop;
  14          
  15          Working_t RAM_xDATA Working;
  16          
  17          #define cnTBoil     98    // 沸点温度
  18          
  19          ///////////////////////////////////////////////////////////////////////////////////////////////////
  20          // 因为蛋清凝固的温度是70+°C，蛋黄凝固的温度是60+°C，所以控制在水温60-70°C之间即可做出温泉蛋
  21          static ROM_DATA WorkPara_t WorkingPara_Tab[cnWorkType_Max][4] = {
  22          //    PreHeat       cooking1      cooking2      cooking3
  23            { { 0, 0 },       { 0, 0 },     { 0, 0 },       { 0, 0 } }, // cnWorkType_Null
  24            { { 99, (15*60UL) },  { 99, (9*60UL) }, { 0, 0 },       { 0, 0 } }, // cnWorkType_CookedAll,  // 全熟
  25            { { 99, (15*60UL) },  { 99, (5*60UL) }, { 0, 0 },       { 0, 0 } }, // cnWorkType_CookedMed,  // 半熟
  26            { { 63, (15*60UL) },  { 63, (6*60UL) }, { 70, (12*60UL) },  { 0, 0 } }, // cnWorkType_CookedHot,  // 温泉蛋
  27            { { 68, (15*60UL) },  { 68, (60*60UL) },  { 0, 0 },       { 0, 0 } }, // cnWorkType_Steam,    // 蒸鸡胸肉
  28            { { 99, (15*60UL) },  { 99, (20*60UL) },  { 0, 0 },       { 0, 0 } }, // cnWorkType_Cooking,    // 蒸煮蔬菜
  29          };
  30          
  31          static void GetWorkingTempTimePara(uint8_t type, uint8_t cook)
  32          {
  33   1        Working.para.temp = WorkingPara_Tab[type][cook].temp;
  34   1        Working.para.tmrms = WorkingPara_Tab[type][cook].tmrms * (1000UL/cnWorkPHTBase);
  35   1      }
  36          
  37          ///////////////////////////////////////////////////////////////////////////////////////////////////
  38          void Working_Con(void)
  39          {
  40   1        TurnOnLedPower();
  41   1      
  42   1        Working.status = cnWorkStatus_Select;
  43   1        if(!IsWorkingTypeValid())
  44   1          Working.type = cnWorkType_CookedAll;
  45   1        
  46   1        GetWorkingTempTimePara(Working.type, 0);
  47   1        TurnOffHeater();
  48   1      
  49   1        WorkingRunTmr = 0;
  50   1        bIsWorkingStop = FALSE;
  51   1        SetWorkMode(cnFuncNumWorking);
  52   1      }
  53          
C51 COMPILER V9.59.0.0   WORK                                                              06/27/2023 19:17:34 PAGE 2   

  54          void Working_De(void)
  55          {
  56   1        // 存储总出水量
  57   1        bIsWorkingStop = FALSE;
  58   1        ResetWorkingPara();
  59   1        Working.status = cnWorkStatus_Stop;
  60   1        TurnOffHeater();
  61   1      }
  62          
  63          void Working_Run_Task(void)
  64          {
  65   1        if(!IsCurWorkModeWorking())
  66   1        {
  67   2          WorkingRunTmr = 0;
  68   2          return;
  69   2        }
  70   1      
  71   1        ++WorkingRunTmr;
  72   1        if((bIsWorkingStop == TRUE) || (WorkingRunTmr > cnWorkingRunT)
  73   1          || ((Working.status == cnWorkStatus_Select) && (WorkingRunTmr > cnWorkingSelectT)))
  74   1        { 
  75   2          // 工作cnWorkingRunT，强制待机:停止加热和出水
  76   2          Working_De();
  77   2          Idle_Con();
  78   2          return;
  79   2        }
  80   1      
  81   1        if(IsNTCBroken())
  82   1        {
  83   2          Emergency_NTCCon();
  84   2          return;
  85   2        } 
  86   1        else if(IsHeaterTempHi())
  87   1        {
  88   2          Emergency_TempHiCon();
  89   2          return;
  90   2        }
  91   1      }
  92          
  93          
  94          ///////////////////////////////////////////////////////////////////////////////////////////////////
  95          static void Working_ShowStatusDoing(void)
  96          {
  97   1        TurnOnLedPower();
  98   1        
  99   1        switch(Working.status)
 100   1        {
 101   2        case cnWorkStatus_PreHeat:        // 先加热
 102   2        case cnWorkStatus_Ready:        // 温度已经达到
 103   2        case cnWorkStatus_DoCooking1:     // 正在煮蛋: 第一阶段
 104   2        case cnWorkStatus_DoCooking2:     // 正在煮蛋: 第二阶段
 105   2        case cnWorkStatus_DoCooking3:     // 正在煮蛋: 第三阶段
 106   2          {
 107   3            if(Working.type == cnWorkType_CookedAll)  // 全熟
 108   3              TurnOnLedCookedAllBreath();
 109   3            else
 110   3              TurnOffLedCookedAll();
 111   3            if(Working.type == cnWorkType_CookedMed)  // 半熟
 112   3              TurnOnLedCookedMedBreath();
 113   3            else
 114   3              TurnOffLedCookedMed();
 115   3            if(Working.type == cnWorkType_CookedHot)  // 温泉蛋
C51 COMPILER V9.59.0.0   WORK                                                              06/27/2023 19:17:34 PAGE 3   

 116   3              TurnOnLedCookedHotBreath();
 117   3            else
 118   3              TurnOffLedCookedHot();
 119   3            if(Working.type == cnWorkType_Steam)    // 蒸
 120   3              TurnOnLedSteamBreath();
 121   3            else
 122   3              TurnOffLedSteam();
 123   3            if(Working.type == cnWorkType_Cooking)    // 蒸煮
 124   3              TurnOnLedCookingBreath();
 125   3            else
 126   3              TurnOffLedCooking();
 127   3          }
 128   2          break;
 129   2      
 130   2        case cnWorkStatus_Ending:
 131   2          {
 132   3            if(Working.type == cnWorkType_CookedAll)  // 全熟
 133   3              TurnOnLedCookedAllFlash500ms();
 134   3            else
 135   3              TurnOffLedCookedAll();
 136   3            if(Working.type == cnWorkType_CookedMed)  // 半熟
 137   3              TurnOnLedCookedMedFlash500ms();
 138   3            else
 139   3              TurnOffLedCookedMed();
 140   3            if(Working.type == cnWorkType_CookedHot)  // 温泉蛋
 141   3              TurnOnLedCookedHotFlash500ms();
 142   3            else
 143   3              TurnOffLedCookedHot();
 144   3            if(Working.type == cnWorkType_Steam)    // 蒸
 145   3              TurnOnLedSteamFlash500ms();
 146   3            else
 147   3              TurnOffLedSteam();
 148   3            if(Working.type == cnWorkType_Cooking)    // 蒸煮
 149   3              TurnOnLedCookingFlash500ms();
 150   3            else
 151   3              TurnOffLedCooking();
 152   3          }
 153   2          break;
 154   2      
 155   2        case cnWorkStatus_Stop:       // 停止出水/加热 
 156   2        case cnWorkStatus_Select:
 157   2        default:
 158   2          {
 159   3            if(Working.type == cnWorkType_CookedAll)  // 全熟
 160   3              TurnOnLedCookedAll();
 161   3            else
 162   3              TurnOffLedCookedAll();
 163   3            if(Working.type == cnWorkType_CookedMed)  // 半熟
 164   3              TurnOnLedCookedMed();
 165   3            else
 166   3              TurnOffLedCookedMed();
 167   3            if(Working.type == cnWorkType_CookedHot)  // 温泉蛋
 168   3              TurnOnLedCookedHot();
 169   3            else
 170   3              TurnOffLedCookedHot();
 171   3            if(Working.type == cnWorkType_Steam)    // 蒸
 172   3              TurnOnLedSteam();
 173   3            else
 174   3              TurnOffLedSteam();
 175   3            if(Working.type == cnWorkType_Cooking)    // 蒸煮
 176   3              TurnOnLedCooking();
 177   3            else
C51 COMPILER V9.59.0.0   WORK                                                              06/27/2023 19:17:34 PAGE 4   

 178   3              TurnOffLedCooking();
 179   3          }
 180   2          break;
 181   2        }
 182   1      }
 183          
 184          static void Working_HeatTemp_Adjust(void)
 185          {
 186   1        uint8_t temp, tempMin, tempMax;
 187   1      
 188   1        if(Working.para.temp == 0)
 189   1        {
 190   2          TurnOffHeater();
 191   2          return;
 192   2        } 
 193   1      
 194   1        tempMin = Working.para.temp - cnTempOffset;
 195   1        tempMax = Working.para.temp + cnTempOffset - 1;
 196   1        temp = GetTempNTC();  // - 1;
 197   1        //temp = 93;
 198   1        
 199   1        if(IsHeaterOn())
 200   1        {
 201   2          if(temp >= tempMax)
 202   2          {
 203   3            TurnOffHeater();
 204   3            if(Working.status == cnWorkStatus_PreHeat)
 205   3            {
 206   4              TurnOffHeater();
 207   4              Working.status = cnWorkStatus_Ready;
 208   4            }
 209   3          } 
 210   2        }
 211   1        else
 212   1        {
 213   2          if(temp <= tempMin)
 214   2          {
 215   3            TurnOnHeater();
 216   3            if(Working.status == cnWorkStatus_Ready)
 217   3              Working.status = cnWorkStatus_PreHeat;
 218   3          }
 219   2          else
 220   2          {
 221   3            if(Working.status == cnWorkStatus_PreHeat)
 222   3            {
 223   4              TurnOffHeater();
 224   4              Working.status = cnWorkStatus_Ready;
 225   4            }
 226   3          }
 227   2        }
 228   1      }
 229          
 230          void Working_PumpHeat_Run_Task(void)
 231          {
 232   1        if(!IsCurWorkModeWorking())
 233   1          return;
 234   1      
 235   1        // Led显示
 236   1        Working_ShowStatusDoing();
 237   1      
 238   1        switch(Working.status)
 239   1        {
C51 COMPILER V9.59.0.0   WORK                                                              06/27/2023 19:17:34 PAGE 5   

 240   2        case cnWorkStatus_PreHeat:
 241   2          {
 242   3            if(Working.para.tmrms == 0)
 243   3              Working.status = cnWorkStatus_Ready;
 244   3            else
 245   3            {
 246   4              --Working.para.tmrms;
 247   4              Working_HeatTemp_Adjust();
 248   4            } 
 249   3          } 
 250   2          break;
 251   2          
 252   2        case cnWorkStatus_Ready:
 253   2          {
 254   3            Working_HeatTemp_Adjust();
 255   3            Working.status = cnWorkStatus_DoCooking1;
 256   3            GetWorkingTempTimePara(Working.type, Working.status-cnWorkStatus_Ready);
 257   3          } 
 258   2          break;
 259   2      
 260   2        case cnWorkStatus_DoCooking1: 
 261   2          {
 262   3            if(Working.para.tmrms == 0)
 263   3            {
 264   4              Working.status = cnWorkStatus_DoCooking2;
 265   4              GetWorkingTempTimePara(Working.type, Working.status-cnWorkStatus_Ready);
 266   4            } 
 267   3            else
 268   3            {
 269   4              --Working.para.tmrms;
 270   4              Working_HeatTemp_Adjust();
 271   4            } 
 272   3          }
 273   2          break;
 274   2        
 275   2        case cnWorkStatus_DoCooking2:
 276   2          {
 277   3            if(Working.para.tmrms == 0)
 278   3            {
 279   4              Working.status = cnWorkStatus_DoCooking3;
 280   4              GetWorkingTempTimePara(Working.type, Working.status-cnWorkStatus_Ready);
 281   4            } 
 282   3            else
 283   3            {
 284   4              --Working.para.tmrms;
 285   4              Working_HeatTemp_Adjust();
 286   4            } 
 287   3          }
 288   2          break;
 289   2          
 290   2        case cnWorkStatus_DoCooking3:
 291   2          {
 292   3            if(Working.para.tmrms == 0)
 293   3            {
 294   4              TurnOffHeater();
 295   4      
 296   4              Working.para.temp = 0;
 297   4              Working.para.tmrms = cnWorkingEndingT;
 298   4              Working.status = cnWorkStatus_Ending;
 299   4            } 
 300   3            else
 301   3            {
C51 COMPILER V9.59.0.0   WORK                                                              06/27/2023 19:17:34 PAGE 6   

 302   4              --Working.para.tmrms;
 303   4              Working_HeatTemp_Adjust();
 304   4            } 
 305   3          }
 306   2          break;
 307   2      
 308   2        case cnWorkStatus_Ending:
 309   2          {
 310   3            if(Working.para.tmrms == 0)
 311   3            {
 312   4              bIsWorkingStop = TRUE;
 313   4              Working.status = cnWorkStatus_Stop;
 314   4            }
 315   3            else
 316   3            {
 317   4              if((Working.para.tmrms%(20*(1000UL/cnWorkPHTBase))) == 0)
 318   4                SetBuzzerRunTime(cnBzToneDone);
 319   4            
 320   4              --Working.para.tmrms;
 321   4              TurnOffHeater();
 322   4            }
 323   3          } 
 324   2          break;
 325   2      
 326   2        case cnWorkStatus_Stop:
 327   2        case cnWorkStatus_Select:
 328   2        default:
 329   2          {
 330   3            TurnOffHeater();
 331   3          }
 332   2          break;
 333   2        }
 334   1      }
 335          
 336          
 337          
 338          ///////////////////////////////////////////////////////////////////////////////////////////////////
 339          static RET_CODE Working_MsgFunc_Key_Power(MsgValue_t MsgValue)
 340          {
 341   1        WorkingRunTmr = 0;
 342   1        
 343   1        if(Get_Key_IsRelease(MsgValue))
 344   1        {
 345   2          Set_Key_Processed();
 346   2      
 347   2          switch(Working.status)
 348   2          {
 349   3          case cnWorkStatus_Select:     // 选择功能
 350   3            {
 351   4              Working.status = cnWorkStatus_PreHeat;
 352   4              GetWorkingTempTimePara(Working.type, 0);
 353   4            }
 354   3            break;
 355   3            
 356   3          case cnWorkStatus_Stop:       // 停止加热 
 357   3          case cnWorkStatus_PreHeat:      // 先加热
 358   3          case cnWorkStatus_Ready:      // 温度已经达到
 359   3          case cnWorkStatus_DoCooking1:   // 正在煮蛋: 第一阶段
 360   3          case cnWorkStatus_DoCooking2:   // 正在煮蛋: 第二阶段
 361   3          case cnWorkStatus_DoCooking3:   // 正在煮蛋: 第三阶段
 362   3          case cnWorkStatus_Ending:     // 结束
 363   3          default:
C51 COMPILER V9.59.0.0   WORK                                                              06/27/2023 19:17:34 PAGE 7   

 364   3            {
 365   4              TurnOffHeater();
 366   4              bIsWorkingStop = FALSE;
 367   4              Working.status = cnWorkStatus_Select;
 368   4            }
 369   3            break;
 370   3          }
 371   2        }
 372   1        else if(Get_Key_IsPressed(MsgValue, cnKeyPressedT_3s))
 373   1        {
 374   2          Set_Key_Processed();
 375   2      
 376   2          Working_De();
 377   2          Idle_Con();
 378   2        }
 379   1        
 380   1        return cnSuccess;
 381   1      }
 382          
 383          
 384          static RET_CODE Working_MsgFunc_Key_Menu(MsgValue_t MsgValue)
 385          {
 386   1        WorkingRunTmr = 0;
 387   1      
 388   1        if(Get_Key_IsRelease(MsgValue))
 389   1        {
 390   2          Set_Key_Processed();
 391   2      
 392   2          if(Working.status == cnWorkStatus_Select)
 393   2          {
 394   3            ++Working.type;
 395   3            if(Working.type >= cnWorkType_Max)
 396   3              Working.type = cnWorkType_CookedAll;
 397   3          } 
 398   2        }
 399   1      
 400   1        return cnSuccess;
 401   1      }
 402          
 403          
 404          ///////////////////////////////////////////////////////////////////////////////////////////////////
 405          // cnFuncNumWorking,        // Working模式
 406          RET_CODE StationRun_Working(uint8_t Msg, MsgValue_t MsgValue)
 407          {
 408   1        RET_CODE retCode = cnFailure;
 409   1      
 410   1        switch(Msg)
 411   1        {
 412   2        case cnMsgKeyPower:
 413   2          retCode = Working_MsgFunc_Key_Power(MsgValue);
 414   2          break;
 415   2        case cnMsgKeyMenu:
 416   2          retCode = Working_MsgFunc_Key_Menu(MsgValue);
 417   2          break;
 418   2          
 419   2        default:
 420   2          retCode = cnNoRespond;
 421   2          break;
 422   2        }
 423   1      
 424   1        return retCode;
 425   1      }
C51 COMPILER V9.59.0.0   WORK                                                              06/27/2023 19:17:34 PAGE 8   

 426          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1234    ----
   CONSTANT SIZE    =    120    ----
   XDATA SIZE       =      7    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
